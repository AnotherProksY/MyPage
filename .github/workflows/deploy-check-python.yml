name: Build

on:
  release:
    types: [ published, deleted ]

jobs:
  deploy_release:

    runs-on: ubuntu-18.04

    steps:
    - id: fetch-latest-release
      uses: thebritican/fetch-latest-release@v2.0.0
      with:
        github_token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

    - uses: actions/checkout@v2
      with:
        ref: ${{ steps.latest.outputs.tag_name }}

    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: 3.6

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with webtest
      run: |
        python tests/test_main_page.py

    - name: Create ssh keys
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
        SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
        sudo chmod 600 ~/.ssh/private.key
        echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts

    - name: Deploy on server
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: ${{ secrets.REMOTE_TARGET }}
      run: |
        rsync -avz -e "ssh -i ~/.ssh/private.key -o StrictHostKeyChecking=no -o UserKnownHostsFile=~/.ssh/known_hosts" \
        --progress src/ \
        "$REMOTE_USER"@"$REMOTE_HOST":"$TARGET"

    - name: Restart app
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
      run: |
        ssh -i ~/.ssh/private.key \
        -o StrictHostKeyChecking=no \
        -o UserKnownHostsFile=~/.ssh/known_hosts \
        "$REMOTE_USER"@"$REMOTE_HOST" sudo systemctl restart mypage.service

    - name: Get response from NGINX
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      run: |
        RESPONSE_CODE=$(curl -I https://"$REMOTE_HOST" 2>/dev/null | head -n 1 | cut -d$' ' -f2)
        if [ $RESPONSE_CODE = 200 ]; then
          exit 0
        else
          exit 1
        fi
